package  cn.com.winning.ssgj.base.interceptor;import cn.com.winning.ssgj.base.Constants;import cn.com.winning.ssgj.base.util.StringUtil;import cn.com.winning.ssgj.domain.SysLoginUser;import cn.com.winning.ssgj.domain.SysUserInfo;import cn.com.winning.ssgj.service.SysLoginUserService;import cn.com.winning.ssgj.service.SysUserInfoService;import org.apache.shiro.SecurityUtils;import org.apache.shiro.authc.UsernamePasswordToken;import org.apache.shiro.subject.Subject;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;/** * Vue 登录拦截 */public class LoginHandlerInterceptor extends HandlerInterceptorAdapter {	@Autowired	private SysLoginUserService sysLoginUserService;	@Autowired	private SysUserInfoService sysUserInfoService;	@Override	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {		//获取请求的URI		String uri = request.getRequestURI();		//请求不是登录或者登出时候，需要登录用户		if(!Constants.Vue.VUE_LOGIN_URL.equals(uri)				&& !Constants.Vue.VUE_LOGOUT_URL.equals(uri)){			String token = request.getHeader("token");			if(!StringUtil.isEmptyOrNull(token)){				SysLoginUser loginUser = sysLoginUserService.getSysLoginUserBySelectiveKey(token);				SysUserInfo user = sysUserInfoService.getSysUserInfoById(loginUser.getUserId());				UsernamePasswordToken userToken = new UsernamePasswordToken(user.getUserid(),user.getPassword());				Subject subject = SecurityUtils.getSubject();				subject.login(userToken);				return super.preHandle(request, response, handler);			}else {				return false;			}		}else if(Constants.Vue.VUE_LOGOUT_URL.equals(uri)){			String token = request.getHeader("token");			if(!StringUtil.isEmptyOrNull(token)) {				SysLoginUser loginUser = sysLoginUserService.getSysLoginUserBySelectiveKey(token);				sysLoginUserService.removeSysLoginUser(loginUser);			}			Subject subject = SecurityUtils.getSubject();			subject.logout();			return super.preHandle(request, response, handler);		}		return super.preHandle(request, response, handler);	}}