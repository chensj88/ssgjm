package  cn.com.winning.ssgj.base.interceptor;import cn.com.winning.ssgj.base.Constants;import cn.com.winning.ssgj.base.exception.SSGJException;import cn.com.winning.ssgj.base.util.StringUtil;import cn.com.winning.ssgj.dao.EtUserLookProjectDao;import cn.com.winning.ssgj.dao.SysOrgExtDao;import cn.com.winning.ssgj.domain.EtUserLookProject;import cn.com.winning.ssgj.domain.SysLoginUser;import cn.com.winning.ssgj.domain.SysOrgExt;import cn.com.winning.ssgj.domain.SysUserInfo;import cn.com.winning.ssgj.service.SysLoginUserService;import cn.com.winning.ssgj.service.SysUserInfoService;import org.apache.shiro.SecurityUtils;import org.apache.shiro.authc.UsernamePasswordToken;import org.apache.shiro.subject.Subject;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.sql.Timestamp;import java.util.Date;import java.util.regex.Matcher;import java.util.regex.Pattern;/** * Vue 登录拦截 */public class LoginHandlerInterceptor extends HandlerInterceptorAdapter {	@Autowired	private SysLoginUserService sysLoginUserService;	@Autowired	private SysUserInfoService sysUserInfoService;	@Autowired	private EtUserLookProjectDao etUserLookProjectDao;	@Autowired	private SysOrgExtDao sysOrgExtDao;	@Override	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {		//获取请求的URI		String uri = request.getRequestURI();		//请求不是登录或者登出时候，需要登录用户		if(!Constants.Vue.VUE_LOGIN_URL.equals(uri)				&& !Constants.Vue.VUE_LOGOUT_URL.equals(uri)			    && !resolveUploadOrDownloadUri(uri)				){			String token = request.getHeader("token");			if(!StringUtil.isEmptyOrNull(token)){ //存在用户登录				SysLoginUser loginUser = sysLoginUserService.getSysLoginUserBySelectiveKey(token);				if(loginUser == null ){					throw new Exception("ERROR_LOGIN_00001");				}				SysUserInfo user = sysUserInfoService.getSysUserInfoById(loginUser.getUserId());				EtUserLookProject etUserLookProject = etUserLookProjectDao.selectLastUserLookProject(user.getId());				SysOrgExt orgExt = sysOrgExtDao.selectUserOrgExtByUserOrgId(user.getOrgid());				if(etUserLookProject != null){					user.getMap().put("C_ID",etUserLookProject.getCId());					user.getMap().put("CU_ID",etUserLookProject.getSerialNo());					user.getMap().put("PM_ID",etUserLookProject.getPmId());				}				if(orgExt != null ){					user.getMap().put("orgExt",orgExt.getOrgNameExt());				}				request.getSession().setAttribute(Constants.USER_INFO,user);				return super.preHandle(request, response, handler);			}else { //跨域调用OPTIONS方法时候				/*throw  new SSGJException("当前没有用户登录，请先登录！");*/				return super.preHandle(request, response, handler);			}		}else if(Constants.Vue.VUE_LOGOUT_URL.equals(uri)  && !resolveUploadOrDownloadUri(uri)){  //登出			String token = request.getHeader("token");			if(!StringUtil.isEmptyOrNull(token)) {				SysLoginUser loginUser = sysLoginUserService.getSysLoginUserBySelectiveKey(token);				if( loginUser != null ){					loginUser.setLogoutTime(new Timestamp(new Date().getTime()));					sysLoginUserService.modifySysLoginUser(loginUser);				}			}			request.getSession().removeAttribute(Constants.USER_INFO);			return super.preHandle(request, response, handler);		}else if(resolveUploadOrDownloadUri(uri)){ //上传，下载处理			return super.preHandle(request, response, handler);		}		//登录		return super.preHandle(request, response, handler);	}	private boolean resolveUploadOrDownloadUri(String uri) {		String lastUri = uri.substring(uri.lastIndexOf("/")+1,uri.lastIndexOf(".do"));		String regex= Constants.Vue.COMMON_UPLOAD_TAG;		Pattern pattern =Pattern.compile(regex);		Matcher matcher=pattern.matcher(lastUri);		boolean result1=matcher.find();		regex= Constants.Vue.COMMON_EXPORT_TAG;		pattern =Pattern.compile(regex);		matcher =pattern.matcher(lastUri);		boolean result2=matcher.find();		regex = Constants.Vue.COMMON_EXPORT_TAG;		pattern =Pattern.compile(regex);		matcher=pattern.matcher(lastUri);		boolean result3 = matcher.find();		if(result1 || result2 || result3){			return true;		}		return  false;	}}